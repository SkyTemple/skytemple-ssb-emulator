# Builds on all branches & PRs
# Deploys to PyPi on "release".
name: Build with and for Python

on: [push, pull_request]

jobs:
  typechecks:
    runs-on: ubuntu-latest
    name: Type checks
    strategy:
      max-parallel: 5
      matrix:
        python-version: [ "3.9", "3.10", "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
      - uses: theCapypara/mypy-check@rust-support
        name: Run type checks
        with:
          mypy_flags: '--config-file mypy.ini'
          requirements: '-r requirements.txt'
          python_version: '${{ matrix.python-version }}'

  build_linux:
    runs-on: ubuntu-latest
    name: Wheel Linux
    strategy:
      max-parallel: 5
      matrix:
        pythonver: [ "cp39", "cp310", "cp311", "cp312" ]
        arch: ["x86_64", "aarch64"]
    steps:
      # For tags we assume the version in setup.py is correct!
      - name: Checkout
        uses: actions/checkout@v4
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "${{ matrix.pythonver }}-manylinux*"
          CIBW_BEFORE_ALL: "{package}/build-manylinux.sh"
          CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin" CXXFLAGS="-DFORCE_AVX512_0=1 -D_POSIX_C_SOURCE=199309L" CFLAGS="-D_POSIX_C_SOURCE=199309L"'
          CIBW_ARCHS: ${{ matrix.arch }}
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-linux
          path: dist/*.whl
  build_macos_windows:
    runs-on: ${{ matrix.os }}
    name: Mac/Win Wheel
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, windows-2019 ]
        python-version: [ '3.8', '3.9', '3.10', '3.11' ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Rewrite version for dev if not tag
        if: "!startsWith(github.ref, 'refs/tags/')"
        shell: bash
        run: |
          perl -i -pe "s/__version__\s*=\s*'(.*?)(\.rc.*|\.a.*|\.post.*)?'/__version__='\1.dev0+${GITHUB_SHA::8}'/" setup.py
      - name: Note version
        shell: bash
        run: |
          echo "PACKAGE_VERSION=$(python3 -- ./setup.py --version)" >> $GITHUB_ENV
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Upgrade pip, install dev dependencies
        run: |
          python -m pip install --upgrade pip wheel
          python -m pip install -r dev-requirements.txt
          python -m pip install -r requirements.txt

      # desmume build deps
      - name: Install MacOS build deps
        if: matrix.os == 'macos-11'
        run: |
          brew install coreutils gcc sdl2 meson glib
      - name: "MacOS: Set env"
        if: matrix.os == 'macos-11'
        run: |
          CC=gcc-10 >> $GITHUB_ENV
          CXX=g++-10 >> $GITHUB_ENV
      - name: Add msbuild to PATH
        if: matrix.os == 'windows-2019'
        uses: microsoft/setup-msbuild@v1
      # end desume build deps

      - name: Build Python wheels
        run: |
          python setup.py bdist_wheel
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build_linux
      - build_macos_windows
    runs-on: ubuntu-latest
    name: Deploy wheels to PyPI
    steps:
      - name: Download wheels
        uses: actions/download-artifact@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip
          pip install twine
      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          twine upload wheels-linux/*manylinux*.whl wheels-windows*/*.whl wheels-macos*/*.whl
